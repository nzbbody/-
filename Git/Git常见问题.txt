/**
* @defgroup Git
* @{
*/

/**
* @defgroup Git常见问题
* @{
*/

/**
@verbatim	
1、push做的事情
	a、修改本地的 origin/master
	b、提交到远程
2、示例如下：
	niuzibin@ubuntu:/home/disk1/GitTest$ git log -4 --oneline --decorate 
	8cbb6c4 (HEAD, master) a
	5109ccf (origin/master, origin/HEAD) b
	b87db1d a
	1e2d2d6 a
	niuzibin@ubuntu:/home/disk1/GitTest$ git diff origin/master master  
	diff --git a/readme.txt b/readme.txt
	index ccc3e7b..db754db 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-aaaaa
	+bbbbb
	niuzibin@ubuntu:/home/disk1/GitTest$ sudo git push origin master:master
	Counting objects: 5, done.
	Delta compression using up to 2 threads.
	Compressing objects: 100% (2/2), done.
	Writing objects: 100% (3/3), 242 bytes | 0 bytes/s, done.
	Total 3 (delta 1), reused 0 (delta 0)
	remote: Resolving deltas: 100% (1/1), completed with 1 local object.
	To https://github.com/nzbbody/GitTest
	5109ccf..8cbb6c4  master -> master
	niuzibin@ubuntu:/home/disk1/GitTest$ git log -4 --oneline --decorate   
	8cbb6c4 (HEAD, origin/master, origin/HEAD, master) a
	5109ccf b
	b87db1d a
	1e2d2d6 a
	niuzibin@ubuntu:/home/disk1/GitTest$ git diff origin/master master     
	niuzibin@ubuntu:/home/disk1/GitTest$ 
3、fetch做的事情
	仅仅修改本地的origin/master，也就是把远程master的数据拿回来
4、示例如下：
	niuzibin@ubuntu:/home/disk1/GitTest$ git fetch origin master
	remote: Counting objects: 3, done.
	remote: Compressing objects: 100% (1/1), done.
	remote: Total 3 (delta 1), reused 3 (delta 1), pack-reused 0
	Unpacking objects: 100% (3/3), done.
	From https://github.com/nzbbody/GitTest
	* branch            master     -> FETCH_HEAD
	8cbb6c4..c1e2a1e  master     -> origin/master
	niuzibin@ubuntu:/home/disk1/GitTest$ git diff origin/master master  
	diff --git a/readme.txt b/readme.txt
	index 1188fe1..db754db 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-ccccc
	+bbbbb
5、需要merge一下
	git merge origin/master
6、pull做的事情
	【git pull origin master】 = 【git fetch origin master】 + 【git merge origin/master】
@endverbatim
*/
push、fetch、pull;

/**
@verbatim	
1、https不可用
	niuzibin@ubuntu:~/work/FLKDBEnc$ sudo git clone https://192.168.10.99/FLKDBEnc/FLKWebCrypt
	Cloning into 'FLKWebCrypt'...
	fatal: unable to access 'https://192.168.10.99/FLKDBEnc/FLKWebCrypt/': gnutls_handshake() failed: Handshake failed
2、使用git@方式
	https://192.168.10.99/profile/keys
	找到generate it
	本地执行 
	ssh-keygen -t rsa -C "niuzibin@flksec.com"
	cat ~/.ssh/id_rsa.pub
3、产生的结果拷贝到 Key，然后add
4、本地执行 git clone git@192.168.10.99:FLKDBEnc/FLKWebCrypt.git	
@endverbatim
*/
https不可用;


/**
@verbatim
1、其他人已经删除某个分支，但是本地还能看到，这个时候fetch报错，如下：
	niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch -a                   
	develop
	* niuzibin
	remotes/origin/HEAD -> origin/develop
	remotes/origin/chenming
	remotes/origin/develop
	remotes/origin/heming
	remotes/origin/master
	remotes/origin/niuzibin
	remotes/origin/patch-1
	remotes/origin/patch-2
	remotes/origin/patch-3
	remotes/origin/patch-4
	remotes/origin/revert-77cdc6fe
	remotes/origin/revert-fa155359
	remotes/origin/tuchengyu
	remotes/origin/tuchengyu2
	remotes/origin/yangyang
	remotes/origin/yogurt
	remotes/origin/ywn
	
	niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ sudo git fetch origin tuchengyu
	fatal: Couldn't find remote ref tuchengyu
	Unexpected end of command stream
2、这个错误的原因是，fetch已经删除的分支
3、如何同步呢？
	执行 git fetch -p，如下：
	From https://192.168.10.99/FLKDBEnc/FLKCDP
	x [deleted]         (none)     -> origin/patch-2
	x [deleted]         (none)     -> origin/patch-3
	x [deleted]         (none)     -> origin/patch-4
	x [deleted]         (none)     -> origin/tuchengyu
	这个时候 git branch -a，就会少一些分支
4、查看分支的关联，如下：
	niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch -vv
	develop  0c0c9a2 [origin/develop: behind 119] Merge branch 'chenming' into 'develop'
	* niuzibin 4463d6a [origin/niuzibin] 删除无用的方法
@endverbatim
@see
*/
git远程分支的删除和同步;

/**
@verbatim
1、git config core.fileMode false
2、可以查看配置文件
	niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ cat .git/config 
	[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
@endverbatim
@see
*/
git忽略文件权限的检查;

/**
@verbatim
1、示例如下：
niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch -a
* develop
  niuzibin
  remotes/origin/HEAD -> origin/develop
  remotes/origin/chenming
  remotes/origin/develop
  remotes/origin/heming
  remotes/origin/master
  remotes/origin/niuzibin
  remotes/origin/patch-1
  remotes/origin/revert-77cdc6fe
  remotes/origin/revert-fa155359
  remotes/origin/tuchengyu2
  remotes/origin/yangyang
  remotes/origin/yogurt
  remotes/origin/ywn
  remotes/origin/ywn1
	
niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch tuchengyu2
niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch -vv
* develop    dc5f079 [origin/develop] Merge branch 'yangyang' into 'develop'
  niuzibin   4463d6a [origin/niuzibin] 删除无用的方法
  tuchengyu2 dc5f079 Merge branch 'yangyang' into 'develop'
  
niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch --set-upstream-to origin/tuchengyu2 tuchengyu2
Branch tuchengyu2 set up to track remote branch tuchengyu2 from origin.
niuzibin@ubuntu:~/work/FLKDBEnc/FLKCDP$ git branch -vv
* develop    dc5f079 [origin/develop] Merge branch 'yangyang' into 'develop'
  niuzibin   4463d6a [origin/niuzibin] 删除无用的方法
  tuchengyu2 dc5f079 [origin/tuchengyu2: behind 14] Merge branch 'yangyang' into 'develop'
@endverbatim
@see
*/
本地创建分支，并和远程关联;

/**
@verbatim
1、svn是集中式，git是分布式
2、svn保存文件的差异，git保存文件的快照，如果没有变化，从上一次引用下来，对于修改的文件，做一个副本，也就是写时拷贝（COW）
3、svn创建分支，相当于整体拷贝，git创建分支，在任意一个提交点（commit point）开启分支
@endverbatim
*/
svn与git对照;


/**
@verbatim
1、显示log
	git log
2、显示最近的两次提交log
	git log -2
3、显示每次提交的内容差异
	git log -2 -p
4、显示某个文件的内容差异
	git log -2 -p .gitignore
5、也可以通过show，显示某一个提交的内容差异，如下：
	root@ubuntu:/home/disk1/GitTest# git log -1 -p .gitignore                         
	commit 12fdff5b6cd259cff2952fce978f1555635d4bfc
	Author: nzbbody <nzbbody@163.com>
	Date:   Wed Jun 6 10:27:04 2018 +0800
	
		增加忽略的文件
	
	diff --git a/.gitignore b/.gitignore
	index 259148f..645ee14 100644
	--- a/.gitignore
	+++ b/.gitignore
	@@ -30,3 +30,6 @@
	*.exe
	*.out
	*.app
	+
	+# Other temp file
	+*.bak
	root@ubuntu:/home/disk1/GitTest# git show 12fdff5b6cd259cff2952fce978f1555635d4bfc .gitignore
	commit 12fdff5b6cd259cff2952fce978f1555635d4bfc
	Author: nzbbody <nzbbody@163.com>
	Date:   Wed Jun 6 10:27:04 2018 +0800
	
		增加忽略的文件
	
	diff --git a/.gitignore b/.gitignore
	index 259148f..645ee14 100644
	--- a/.gitignore
	+++ b/.gitignore
	@@ -30,3 +30,6 @@
	*.exe
	*.out
	*.app
	+
	+# Other temp file
	+*.bak
@endverbatim
*/
log命令;



/**
@verbatim
1、远程有develop和niuzibin，在gitlab执行 merge niuzibin-->develop
2、我的本地有 niuzibin，注意：本地的develop没有意义
	本地的niuzibin分支，push到 origin/niuzibin
3、我在本地修改 niuzibin分支，
4、然后add commit，
5、从origin/develop进行fetch，然后merge，有冲突，解决冲突，再次add commit push
6、注意：4和5是不能颠倒顺序的，本地有修改，必须先提交，再merge
@endverbatim
*/
我们的开发分支管理;


/**
@verbatim
1、git fetch origin master，通过fetch前后的文本对照和抓包，发现
	fetch会获取远程分支的commit id，也就是本地的文件FETCH_HEAD，以及远程 origin/master的最新文件内容
2、然后merge origin/master，会合并 origin/master 到 merge
	也就是说，merge origin/master 并没有网络传输
3、git pull origin master = git fetch origin master + merge origin/master
	但是，一般不要使用pull，在背后进行merge总是不好的。
@endverbatim
*/
看看fetch做了什么事情;


/**
@verbatim
1、git push命令用于将本地分支的更新，推送到远程主机。它的格式与git pull命令相似。
	git push <远程主机名> <本地分支名>:<远程分支名>
2、git push origin master
	上面命令表示，将本地的master分支推送到origin主机的master分支。如果master不存在，则会被新建。
@endverbatim
*/
push命令;

/**
@verbatim
1、执行的结果如下：
	niuzibin@ubuntu:~/work/gittest$ git status    
	On branch master
	Changes to be committed:
	(use "git reset HEAD <file>..." to unstage)
	
			modified:   readme.txt
	
	Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)
	
			modified:   readme.txt
2、解释如下：
	On branch master				工作的分支
	Changes to be committed:		暂存区没有提交的信息
	Changes not staged for commit:	工作区没有添加到暂存区的信息
3、本地的修改状态
	工作区----【add】------->暂存区----【commit】-------->版本库
	工作区<---【checkout】---暂存区<---【reset HEAD】-----版本库
4、注意：提交的时候，如果没有-m写日志，会提示输入日志。输入之后，Ctrl+o，然后Enter，然后Ctrl+x
@endverbatim
*/
git命令status;

/**
@verbatim
1、分为两种情况：
	第一种情况，工作区做了修改，还没有添加到暂存区。
	第二种情况，工作区做了修改，并且已经添加到暂存区，然后工作区又做了修改。
2、对于第一种情况，直接使用checkout即可。如下：
	niuzibin@ubuntu:~/work/gittest$ git status
	On branch master
	Changes not staged for commit:
	(use "git add <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)
	
			modified:   readme.txt
	
	no changes added to commit (use "git add" and/or "git commit -a")
	niuzibin@ubuntu:~/work/gittest$ git diff  
	diff --git a/readme.txt b/readme.txt
	index 4dd9cb5..56b6b46 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Andy
	+I am Bill
	niuzibin@ubuntu:~/work/gittest$ git checkout readme.txt
	niuzibin@ubuntu:~/work/gittest$ git status
	On branch master
	nothing to commit, working directory clean
	niuzibin@ubuntu:~/work/gittest$ git diff
3、对于第二种情况，版本库是 I am Andy，暂存区是 I am Bill， 工作区是 I am Caroline，如下：
	// 比较暂存区和版本库的差别
	niuzibin@ubuntu:~/work/gittest$ git diff --cached
	diff --git a/readme.txt b/readme.txt
	index 4dd9cb5..56b6b46 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Andy
	+I am Bill
	
	// 比较工作区和暂存区的差别
	niuzibin@ubuntu:~/work/gittest$ git diff
	diff --git a/readme.txt b/readme.txt
	index 56b6b46..b688830 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Bill
	+I am Caroline
	
	// 比较工作区和版本库的差别
	niuzibin@ubuntu:~/work/gittest$ git diff HEAD
	diff --git a/readme.txt b/readme.txt
	index 4dd9cb5..b688830 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Andy
	+I am Caroline
4、撤销工作区的修改，如下：
	niuzibin@ubuntu:~/work/gittest$ git checkout readme.txt
	niuzibin@ubuntu:~/work/gittest$ git diff --cached
	diff --git a/readme.txt b/readme.txt
	index 4dd9cb5..56b6b46 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Andy
	+I am Bill
	niuzibin@ubuntu:~/work/gittest$ git diff
	niuzibin@ubuntu:~/work/gittest$ git diff HEAD          
	diff --git a/readme.txt b/readme.txt
	index 4dd9cb5..56b6b46 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Andy
	+I am Bill
5、撤销暂存区的修改，如下：
	niuzibin@ubuntu:~/work/gittest$ git reset HEAD readme.txt
	Unstaged changes after reset:
	M       readme.txt
	niuzibin@ubuntu:~/work/gittest$ git diff --cached
	niuzibin@ubuntu:~/work/gittest$ git diff
	diff --git a/readme.txt b/readme.txt
	index 4dd9cb5..56b6b46 100644
	--- a/readme.txt
	+++ b/readme.txt
	@@ -1 +1 @@
	-I am Andy
	+I am Bill
6、还需要再次checkout，如下：
	niuzibin@ubuntu:~/work/gittest$ git checkout readme.txt
	niuzibin@ubuntu:~/work/gittest$ git diff --cached
	niuzibin@ubuntu:~/work/gittest$ git diff
7、也就是说，checkout相当于拿暂存区的数据，覆盖工作区。reset HEAD相当于拿版本库的数据，覆盖暂存区。
8、考虑工作区、暂存区、版本库的内容分别为C、B、A
	现在要全部撤销，有两个办法：
	第一个办法：checkout结果为【B、B、A】-->reset HEAD结果为【B、A、A】-->checkout结果为【A、A、A】
	第二个办法：reset HEAD结果为【C、A、A】-->checkout结果为【A、A、A】
@endverbatim
*/
git撤销修改;

/** @} */

/** @} */