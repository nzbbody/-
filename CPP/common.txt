/**
* @defgroup CPP
* @{
*/

/**
@verbatim
1、测试代码
    #include <stdio.h>
    #include <sys/time.h>
    #include <string>
    #include <map>
    
    using std::string;
    using std::map;
    #define MAPSIZE 1000000
    
    string GetSystemTime()
    {
            struct timeval tv;
            gettimeofday(&tv,NULL);
            struct tm* pTime;
            pTime = localtime(&tv.tv_sec);
    
            char sTemp[30] = {0};
            snprintf(sTemp, sizeof(sTemp), "[%04d%02d%02d %02d:%02d:%02d.%06lu]",
                            pTime->tm_year+1900, pTime->tm_mon+1, pTime->tm_mday,
                            pTime->tm_hour, pTime->tm_min, pTime->tm_sec, tv.tv_usec);
            return (string)sTemp;
    }
    
    void AddItem(map<int,string>& aMap)
    {
            for(int i =0; i<MAPSIZE; ++i)
            {
                    char tmp[64]={0};
                    sprintf(tmp,"%s_%d", "Andy", i);
                    aMap[i] = tmp;
            }
            printf("map size[%lu]\n", aMap.size());
    }
    
    int main()
    {
            map<int,string> aMap;
            AddItem(aMap);
    
            printf("begin %s\n", GetSystemTime().c_str());
            for(int i=0; i<MAPSIZE; ++i)
            {
                    map<int,string>::iterator iter = aMap.find(i);
            }
            printf("end   %s\n", GetSystemTime().c_str());
    
            return 0;
    }
2、对照测试，是否带有调试信息
    niuzibin@ubuntu:~/work/tmp$ g++ -o main main.cpp -g    
    niuzibin@ubuntu:~/work/tmp$ readelf -S main |grep debug 
    [28] .debug_aranges    PROGBITS         0000000000000000  0000414f
    [29] .debug_info       PROGBITS         0000000000000000  000045ef
    [30] .debug_abbrev     PROGBITS         0000000000000000  0000a3aa
    [31] .debug_line       PROGBITS         0000000000000000  0000ab05
    [32] .debug_str        PROGBITS         0000000000000000  0000b633
    [33] .debug_ranges     PROGBITS         0000000000000000  00011463
    niuzibin@ubuntu:~/work/tmp$ ./main
    map size[1000000]
    begin [20180802 00:12:05.668542]
    end   [20180802 00:12:05.939832]
    
    niuzibin@ubuntu:~/work/tmp$ g++ -o main main.cpp
    niuzibin@ubuntu:~/work/tmp$ readelf -S main |grep debug
    niuzibin@ubuntu:~/work/tmp$ ./main
    map size[1000000]
    begin [20180802 00:12:42.144723]
    end   [20180802 00:12:42.420988]
3、对照测试，是否带有优化选项
    niuzibin@ubuntu:~/work/tmp$ g++ -o main main.cpp -O0
    niuzibin@ubuntu:~/work/tmp$ ./main
    map size[1000000]
    begin [20180802 00:14:16.254965]
    end   [20180802 00:14:16.534845]
    
    niuzibin@ubuntu:~/work/tmp$ g++ -o main main.cpp -O3
    niuzibin@ubuntu:~/work/tmp$ ./main
    map size[1000000]
    begin [20180802 00:14:21.340568]
    end   [20180802 00:14:21.460473]
4、-g会增加文件的大小，但是对性能影响不大；-O3可以大幅度提高性能。
@endverbatim
@see
*/
CPP性能测试;

/**
@verbatim
1、不要使用using namespace std; 因为这会名称空间污染。
2、接口要暴露，就写在头文件，接口不暴露，就写在cpp文件，并且定义为 static内部链接。
@endverbatim
@see
*/
编码规范;

/**
@verbatim
1、字符串太长，换行显示，怎么办？
2、使用反斜杠，如下：
	string str = "abcd\
				 1234";
	注意：反斜杠后面不准有任何字符。下一行开头的制表符不包含在整个字符串中，但是下一行开头的空格符包含在整个字符串中。
3、使用双引号，如下：
	string str = "abcd"
		"1234";
	注意：两个字符串会自动拼接，两个字符串之间可以有任意多个空字符("")和空白字符（空白字符包括空格字符，制表符，换行符）。注意下面的区别：
	NULL：没有值
	空字符：""，不包含任何字符
	空白字符：有空格字符，制表符，换行符
@endverbatim
@see
*/
代码换行;


/**
@verbatim
测试场景，Test，lib1，lib2，dll1，dll2，分为下面四种情况：
1、Test->lib1->lib2
	lib1编译自己的代码，对lib2的部分，只需要lib2的头文件，对lib2的代码实现，使用占位符关联。
	生成Test连接的时候，把lib1的代码实现包含进来，再递归，把lib1中关联lib2的代码实现也包含进来。
	运行Test的时候，不再需要lib1和lib2。
	也就是说，lib2不合并到lib1中，等到exe的时候，一起合并到exe中。
2、Test->lib1->dll2
	lib1编译自己的代码，对dll2的部分，只需要dll2的头文件，对dll2的代码实现，使用占位符关联。
	生成Test连接的时候，把lib1的代码实现包含进来，但是，dll2中的代码不包含进来。
	运行Test的时候，不需要lib1，但是需要dll2【不需要dll的lib文件】
	也就是说，dll2不合并到lib1中，等到exe的时候，把lib1合并到exe中。
3、Test->dll1->lib2
	dll1编译自己的代码，对lib2的部分，需要lib2的头文件和实现，即lib2，把lib2的代码实现包含到dll1中
	生成Test连接的时候，dll1中的代码不包含进来,也不再需要lib2。
	【可以这样测试，生成lib2，生成dll1，生成test，删除lib2，删除test.exe,再生成test，
	可以成功，说明生成test.exe,连接的时候，根本不需要lib2，
	也就是说，静态库会被连接到动态库或者exe中，但是不会连接到其他的lib中】
	运行Test的时候，需要dll1，但是不需要lib2
	也就是说，lib2合并到dll1中，等到exe的时候，不需要合并dll1，运行时需要dll1。
4、Test->dll1->dll2
	dll1编译自己的代码，对dll2的部分，需要dll2的头文件和lib文件，对dll2的代码实现，使用占位符关联。
	生成Test连接的时候，Test需要dll1的lib，dll1需要dll2的lib，但是代码实现都不会包含在Test中。
	运行Test的时候，需要dll1和dll2【不需要他们的lib】
	也就是说，dll2不合并到dll1中，等到exe的时候，二者都不需要合并,运行时需要二者。
@endverbatim
@see
*/
静态库与动态库相互调用;



/** @} */