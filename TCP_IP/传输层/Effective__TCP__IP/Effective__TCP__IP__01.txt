/**
* @defgroup 传输层
* @{
*/

/**
* @defgroup Effective__TCP__IP
* @{
*/

/**
@verbatim
1、面向连接和无连接指的是协议，本质区别在于：对于无连接协议来说，每个分组的处理都独立于其他的分组。
	而对于面向连接的协议，协议实现维护了当前分组与后继分组有关的状态信息。
2、无连接就是指udp，分组称为数据报（datagram），每个分组都独立寻址，udp会尽最大努力发送数据报，
	但是不保证数据报不丢失，不延迟，不错序。
	注意：对于udp，可以在应用层维护数据报的状态。
3、面向连接就是tcp，tcp的分组称为段（segment），协议维护了分组之间的状态，记住这些状态，协议可以提供可靠的传输。
4、一个标准的类比就是：udp就像寄明信片，tcp就像打电话。
5、udp有这么多缺点，为什么还要使用这种协议呢？
	a、面向连接只支持一对一通信，无连接很方便地支持一对多和多对一的通信，面向连接需要多个独立的连接才能实现。
	b、更重要的是，无连接是面向连接的基础，udp和tcp在ip协议之上，ip协议只转发分组，不对底层做任何假设，
		ip就是不可靠的无连接服务。
6、tcp是怎么提供可靠的传输？
	tcp在ip协议上增加了3项功能：
	a、为tcp段中的数据提供校验和，在接收端检查数据是否损坏
	b、tcp为每个字节提供序列号，即使在接收端错序了，可以根据恰当的顺序重装起来
		注意：tcp并没有为每一个字节附加一个序列号，而是在tcp发送的段中为第一个字节标识了序号，
		这样就隐含了段中其它字节的序列号
	c、tcp提供了确认重传机制
7、确认重传机制是如何工作的？
	tcp是全双工的，每一端既是接收端又是发送端。
8、站在接收端的角度，接收端维护了接收窗口，左边界是期望接收的下一个字节的序号，右边界表示接收缓冲区的能容纳的最大字节序号。
	接收端通过告诉发送端自己的接收窗口，可以用于流量控制，防止缓冲区溢出。
	对于接收的数据（一组字节，会覆盖接收窗口的一个区间），如果在左边界之前，说明是已收到的数据，丢弃。
	如果在右边界之后，说明是没有对应的缓冲区存储，丢弃。
	如果不是所期望的下一个字节，说明是错序的，需要等待前面缺少的数据到达。
	如果是所期望的下一个字节，通知应用程序有数据可读。这时候所期望接收的字节序号加上段中的字节个数，进行更新，
	窗口向右滑动。同时向发送端发送ack，告知所期望接收的下一个字节序号。
9、站在发送端的角度，发送端维护发送窗口，窗口划分成两部分，已发送但还未被确认的字节，可以发送但还未发送的字节。
	对于已发送但还未被确认的字节，会启动RTO（Retransmission TimeOut 超时重传）定时器，超时认为丢失了，重新发送。
	注意：RTO超时并不意味着原来的数据没有到达目的地，有可能是ack丢失了，也有可能是网络延迟，导致收到ack的时候已经超时。
	重传不会导致什么问题，因为接收端会丢弃重新收到的数据。
10、udp在ip协议上增加了2项功能，分别如下：
	a、提供了可选的校验和用来检测数据是否损坏。ip也有校验和，但是ip的校验和只是对ip分组的首部进行计算，
		而udp和tcp提供的校验和用于保护他们自己的首部和数据。
	b、udp增加了端口的概念（当然tcp也是），ip地址对应主机，端口对应主机上的进程。
@endverbatim
*/
【T01】理解面向连接和无连接协议之间的区别;


/** @} */

/** @} */
