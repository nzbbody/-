/**
* @defgroup Linux
* @{
*/

/**
@verbatim
1、valgrind是什么？
	valgrind是Linux下仿真调试工具的集合，由内核和基于内核的调试工具组成，valgrind模拟一个CPU环境。
2、valgrind包括的工具：
	Memcheck：	这是valgrind应用最广泛的工具，一个重量级的内存检查器，能够发现开发中绝大多数内存错误使用情况。
				比如，使用未初始化的内存，使用已经释放了的内存，内存访问越界等。
	Callgrind：	它主要用来检查程序中函数调用过程中出现的问题。
	Cachegrind：它主要用来检查程序中缓存使用出现的问题。
	Helgrind：	它主要用来检查多线程程序中出现的竞争问题。
	Massif：	它主要用来检查程序中堆栈使用中出现的问题。
	Extension：	可以利用core提供的功能，自己编写特定的内存调试工具
3、Memcheck能够检测出内存问题，关键在于其建立了两个全局表。
	Valid-Value表：记录内存的值是否初始化，是否有效。
	Valid-Address表：记录该地址是否能够被读写。
4、重点介绍内存的检测情况，内存没有初始化。
	代码：
	int main(int agc, char* argv[])
	{
			int* pi;
			int a = *pi;
			return 0;
	}
	测试：
	[root@localhost valgrind]# valgrind --tool=memcheck --leak-check=full ./main
	==7422== Memcheck, a memory error detector
	==7422== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
	==7422== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
	==7422== Command: ./main
	==7422== 
	==7422== Use of uninitialised value of size 4
	==7422==    at 0x8048408: main (in /home/niu/valgrind/main)
	==7422== 
	==7422== 
	==7422== HEAP SUMMARY:
	==7422==     in use at exit: 0 bytes in 0 blocks
	==7422==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
	==7422== 
	==7422== All heap blocks were freed -- no leaks are possible
	==7422== 
	==7422== For counts of detected and suppressed errors, rerun with: -v
	==7422== Use --track-origins=yes to see where uninitialised values come from
	==7422== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 15 from 8)
	指出上下文有一个错误，使用--track-origins=yes查看，栈上的内存没有初始化。
	[root@localhost valgrind]# valgrind --tool=memcheck --leak-check=full --track-origins=yes ./main
	==7483== Memcheck, a memory error detector
	==7483== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
	==7483== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
	==7483== Command: ./main
	==7483== 
	==7483== Use of uninitialised value of size 4
	==7483==    at 0x8048408: main (in /home/niu/valgrind/main)
	==7483==  Uninitialised value was created by a stack allocation
	==7483==    at 0x8048402: main (in /home/niu/valgrind/main)
	==7483== 
	==7483== 
	==7483== HEAP SUMMARY:
	==7483==     in use at exit: 0 bytes in 0 blocks
	==7483==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
	==7483== 
	==7483== All heap blocks were freed -- no leaks are possible
	==7483== 
	==7483== For counts of detected and suppressed errors, rerun with: -v
	==7483== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 15 from 8)
5、内存泄露
	代码：
	int main(int agc, char* argv[])
	{
			int* pi = new int[10];	
			return 0;
	}
	测试：
	[root@localhost valgrind]# valgrind --tool=memcheck --leak-check=full ./main
	==7636== Memcheck, a memory error detector
	==7636== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
	==7636== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
	==7636== Command: ./main
	==7636== 
	==7636== 
	==7636== HEAP SUMMARY:
	==7636==     in use at exit: 40 bytes in 1 blocks
	==7636==   total heap usage: 1 allocs, 0 frees, 40 bytes allocated
	==7636== 
	==7636== 40 bytes in 1 blocks are definitely lost in loss record 1 of 1
	==7636==    at 0x4005D2D: operator new[](unsigned int) (vg_replace_malloc.c:258)
	==7636==    by 0x8048490: main (in /home/niu/valgrind/main)
	==7636== 
	==7636== LEAK SUMMARY:
	==7636==    definitely lost: 40 bytes in 1 blocks
	==7636==    indirectly lost: 0 bytes in 0 blocks
	==7636==      possibly lost: 0 bytes in 0 blocks
	==7636==    still reachable: 0 bytes in 0 blocks
	==7636==         suppressed: 0 bytes in 0 blocks
	==7636== 
	==7636== For counts of detected and suppressed errors, rerun with: -v
	==7636== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 15 from 8)
	内存泄露40个字节
6、内存申请释放不匹配
	代码：
	#include <stdlib.h>
	int main(int agc, char* argv[])
	{
			int* p1 = new int[10];
			delete p1;
	
			int* p2 = new int;
			free(p2);
	
			return 0;
	}
	测试：
	[root@localhost valgrind]# valgrind --tool=memcheck --leak-check=full ./main
	==8162== Memcheck, a memory error detector
	==8162== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
	==8162== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
	==8162== Command: ./main
	==8162== 
	==8162== Mismatched free() / delete / delete []
	==8162==    at 0x4005234: operator delete(void*) (vg_replace_malloc.c:346)
	==8162==    by 0x804852E: main (in /home/niu/valgrind/main)
	==8162==  Address 0x4017028 is 0 bytes inside a block of size 40 alloc'd
	==8162==    at 0x4005D2D: operator new[](unsigned int) (vg_replace_malloc.c:258)
	==8162==    by 0x8048520: main (in /home/niu/valgrind/main)
	==8162== 
	==8162== Mismatched free() / delete / delete []
	==8162==    at 0x400551D: free (vg_replace_malloc.c:325)
	==8162==    by 0x8048548: main (in /home/niu/valgrind/main)
	==8162==  Address 0x4017080 is 0 bytes inside a block of size 4 alloc'd
	==8162==    at 0x40060D5: operator new(unsigned int) (vg_replace_malloc.c:214)
	==8162==    by 0x804853A: main (in /home/niu/valgrind/main)
	==8162== 
	==8162== 
	==8162== HEAP SUMMARY:
	==8162==     in use at exit: 0 bytes in 0 blocks
	==8162==   total heap usage: 2 allocs, 2 frees, 44 bytes allocated
	==8162== 
	==8162== All heap blocks were freed -- no leaks are possible
	==8162== 
	==8162== For counts of detected and suppressed errors, rerun with: -v
	==8162== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 15 from 8)
7、踩内存
	代码：
	#include <stdlib.h>
	#include <memory.h>
	int main(int agc, char* argv[])
	{
			char* p1 = new char[4];
			char* p2 = "abcde";
			memcpy(p1,p2,5);
			return 0;
	}
	测试：
	[root@localhost valgrind]# valgrind --tool=memcheck --leak-check=full ./main
	==8387== Memcheck, a memory error detector
	==8387== Copyright (C) 2002-2009, and GNU GPL'd, by Julian Seward et al.
	==8387== Using Valgrind-3.5.0 and LibVEX; rerun with -h for copyright info
	==8387== Command: ./main
	==8387== 
	==8387== Invalid write of size 1
	==8387==    at 0x80484A9: main (in /home/niu/valgrind/main)
	==8387==  Address 0x401702c is 0 bytes after a block of size 4 alloc'd
	==8387==    at 0x4005D2D: operator new[](unsigned int) (vg_replace_malloc.c:258)
	==8387==    by 0x8048490: main (in /home/niu/valgrind/main)
	==8387== 
	==8387== 
	==8387== HEAP SUMMARY:
	==8387==     in use at exit: 4 bytes in 1 blocks
	==8387==   total heap usage: 1 allocs, 0 frees, 4 bytes allocated
	==8387== 
	==8387== 4 bytes in 1 blocks are definitely lost in loss record 1 of 1
	==8387==    at 0x4005D2D: operator new[](unsigned int) (vg_replace_malloc.c:258)
	==8387==    by 0x8048490: main (in /home/niu/valgrind/main)
	==8387== 
	==8387== LEAK SUMMARY:
	==8387==    definitely lost: 4 bytes in 1 blocks
	==8387==    indirectly lost: 0 bytes in 0 blocks
	==8387==      possibly lost: 0 bytes in 0 blocks
	==8387==    still reachable: 0 bytes in 0 blocks
	==8387==         suppressed: 0 bytes in 0 blocks
	==8387== 
	==8387== For counts of detected and suppressed errors, rerun with: -v
	==8387== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 15 from 8)
@endverbatim
*/
valgrind;


/** @} */